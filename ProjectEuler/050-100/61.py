"""
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal 
numbers are all figurate (polygonal) numbers and are generated by the following formulae:

Triangle	 	P3, n = n(n+1)/2	 	1, 3, 6, 10, 15, ...
Square	 	  P4, n = n^2	      	1, 4, 9, 16, 25, ...
Pentagonal	P5, n = n(3n-1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	P6, n = n(2n-1)	  	1, 6, 15, 28, 45, ...
Heptagonal	P7, n = n(5n-3)/2	 	1, 7, 18, 34, 55, ...
Octagonal	 	P8, n = n(3n-2)	  	1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two digits 
of the next number (including the last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882),
is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.
Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: 
triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, 
is represented by a different number in the set.
"""

triangle = lambda i: i*(i+1)//2
square = lambda i: i*i
pentagonal = lambda i: i*(3*i-1)//2
hexagonal = lambda i: i*(2*i-1)
heptagonal = lambda i: i*(5*i-3)//2
octagonal = lambda i: i*(3*i-2)

# returns list of elements of type 'func' with length n
def find_by_length(func,n):
  res = []
  i = 1; 
  while len(str(func(i))) < n: 
    i+=1
  while len(str(func(i))) == n: 
    res.append(func(i))
    i+=1
  return res

n_dig = 4  
tr = find_by_length(triangle,n_dig)
sq = find_by_length(square,n_dig)
pt = find_by_length(pentagonal,n_dig)
hx = find_by_length(hexagonal,n_dig)
hp = find_by_length(heptagonal,n_dig)
oct = find_by_length(octagonal,n_dig)

# 0:tr,1:sq,2:pt,3:hx,4:hp,5:oct
numbs = [tr,sq,pt,hx,hp,oct]
for i,n in enumerate(numbs):
  numbs[i] = map(lambda x:(x[:2],x[2:]),map(str,n))
  

def func(st,poss,numbs):
  if filter(lambda x: x==-1,poss) != []:
    for i,p in enumerate(poss):
      if p == -1:
        for n in numbs[i]:
          if n[0] == st:
            poss[i] = n
            func(n[1],poss,numbs)
        poss[i] = -1
        
  elif st == poss[0][0]: print poss 
      
         
poss = len(numbs)*[-1]
for n in numbs[0]:
  poss[0] = n
  func(n[1],poss,numbs)
      









